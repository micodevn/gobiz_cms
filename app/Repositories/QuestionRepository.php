<?php

namespace App\Repositories;

use App\Helpers\Helper;
use App\Http\Resources\API\QuestionResource;
use App\Http\Services\FileService;
use App\Models\ExerciseQuestions;
use App\Models\Question;
use App\Models\QuestionAttributes;
use App\Models\QuestionPlatform;
use App\Models\QuestionVideoTimes;
use Modules\AdaptiveLearning\Entities\TargetLanguage;
use App\Models\VideoTimeProperty;
use Illuminate\Container\Container as Application;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Redis;
use PHPUnit\Exception;
use function Aws\boolean_value;

/**
 * Class QuestionRepository
 * @package App\Repositories
 * @version March 30, 2022, 9:47 am +07
 */
class QuestionRepository extends BaseRepository
{
    protected FileService $fileService;
    /**
     * @var array
     */
    protected $fieldSearchable = [
        'name',
        'title'
    ];

    public function __construct(Application $app, FileService $fileService)
    {
        parent::__construct($app);
        $this->fileService = $fileService;
    }

    /**
     * Return searchable fields
     *
     * @return array
     */
    public function getFieldsSearchable()
    {
        return $this->fieldSearchable;
    }

    /**
     * Configure the Model
     **/
    public function model()
    {
        return Question::class;
    }

    public function create(array $attributes)
    {
        $attributes['created_by'] = \Auth::id();
        $model = parent::create($attributes); // TODO: Change the autogenerated stub
//        $attributes['learningObj_id'] = array_filter($attributes['learningObj_id']);
//        $this->formatAttrTargetLanguage($attributes);
//        $target_languages = \Arr::get($attributes, 'target_language_ids', []);
//        $target_languages = array_filter($target_languages);

        $this->syncAttribute($attributes, $model->id);
        $model->syntheticIdQuestionWithLevel();
//        $model->targetLanguages()->sync($target_languages);
//        $model->learningObjectives()->sync($attributes['learningObj_id']);
//        $model->load(['videoTimestamps', 'targetLanguages']);

        foreach ($model->exercises as $exercise) {
            $exercise->cache();
        }

        return $model;
    }

    /**
     * @throws Exception
     * @throws \Prettus\Validator\Exceptions\ValidatorException
     */
    public function update(array $attributes, $id)
    {
        /** @var Question $model */
//        $attributes['learningObj_id'] = array_filter($attributes['learningObj_id']);
        $model = parent::update($attributes, $id);
//        $this->formatAttrTargetLanguage($attributes);
//        $target_languages = \Arr::get($attributes, 'target_language_ids');
//        $target_languages = array_filter($target_languages);
        $this->syncAttribute($attributes, $model->id);
//        $model->targetLanguages()->sync($target_languages);
//        $model->learningObjectives()->sync($attributes['learningObj_id']);
        return $model;
    }

    private function loadQuestionContent($questionContentAttr)
    {
        $animations = Arr::get($questionContentAttr, 'asset_bundle_block.animations', []);
        $questionContent = [
            'title' => [
                'value' => Arr::get($questionContentAttr, 'text.title'),
            ],
            'text' => [
                'value' => Arr::get($questionContentAttr, 'text.text'),
            ],
            'explanation' => [
                'value' => Arr::get($questionContentAttr, 'text.explanation'),
            ],
            'description' => [
                'value' => Arr::get($questionContentAttr, 'text.description'),
            ],
            'video' => [
                'id' => Arr::get($questionContentAttr, 'video.id'),
            ],
            'all_type_timestamp' => Arr::get($questionContentAttr, 'video.all_type_timestamp', false),
            'image' => [
                'id' => Arr::get($questionContentAttr, 'image.id'),
            ],
            'audio' => [
                'id' => Arr::get($questionContentAttr, 'audio.id'),
            ],
            'explanation_audio' => [
                'id' => Arr::get($questionContentAttr, 'explanation_audio.id'),
            ],
            'explanation_video' => [
                'id' => Arr::get($questionContentAttr, 'explanation_video.id'),
            ],
            'document' => [
                'id' => Arr::get($questionContentAttr, 'document.id'),
            ],
            'asset_bundle_block' => [
                'prefab_name' => Arr::get($questionContentAttr, 'asset_bundle_block.prefab_name'),
                'version' => Arr::get($questionContentAttr, 'asset_bundle_block.version'),
                'ios_id' => Arr::get($questionContentAttr, 'asset_bundle_block.ios_id'),
                'android_id' => Arr::get($questionContentAttr, 'asset_bundle_block.android_id'),
                'webgl_id' => Arr::get($questionContentAttr, 'asset_bundle_block.webgl_id'),
                'animations' => array_map(function ($anim) {
                    return [
                        'id' => Arr::get($anim, 'id'),
                        'position' => [
                            'x' => Arr::get($anim, 'position.x'),
                            'y' => Arr::get($anim, 'position.y'),
                        ]
                    ];
                }, $animations),
            ],
        ];

        return $questionContent;
    }

    private function loadQuestionAnswers($answersAttr)
    {
        $answers = [];

        foreach ($answersAttr as $answerAttr) {
            $answers[] = $this->loadQuestionAnswer($answerAttr);
        }

        return $answers;
    }

    private function loadQuestionAnswer($answerAttr)
    {
        return [
            'id' => Arr::get($answerAttr, 'id'),
            'text' => [
                'value' => Arr::get($answerAttr, 'text.value')
            ],
            'image' => [
                'id' => Arr::get($answerAttr, 'image.id')
            ],
            'audio' => [
                'id' => Arr::get($answerAttr, 'audio.id')
            ],
            'right_response' => Arr::get($answerAttr, 'right_response'),
            'animation' => [
                'id' => Arr::get($answerAttr, 'animation.id'),
                'position' => [
                    'x' => Arr::get($answerAttr, 'animation.position.x'),
                    'y' => Arr::get($answerAttr, 'animation.position.y'),
                ]
            ]
        ];
    }

    public function fill($attributes, $model = null)
    {
        if (!$model) {
            $model = new Question();
        }

        $model->name = Arr::get($attributes, 'name');
        $model->title = Arr::get($attributes, 'title');
        $model->description = Arr::get($attributes, 'description');
        $model->platform_id = Arr::get($attributes, 'platform_id');
        $model->topic_id = Arr::get($attributes, 'topic_id');
        $model->level = Arr::get($attributes, 'level');
        $model->metadata_version = Arr::get($attributes, 'metadata_version');
        $model->response_interaction_type = Arr::get($attributes, 'response_interaction_type');
        $model->product_id = \Auth::user()?->product_id;

        $questionContentAttr = Arr::get($attributes, 'question_content', []);
        $questionContent = $this->loadQuestionContent($questionContentAttr);
        $model->question_content = json_encode($questionContent);

        $answersAttr = Arr::get($attributes, 'answers', []);
        $answers = $this->loadQuestionAnswers($answersAttr);
        $model->answers = json_encode($answers);

        return $model->toArray();
    }


    public function formatAttrTargetLanguage(&$attribute)
    {
        $target_new = $ids = [];
        if (!empty($attribute['new_target_language'])) {
            $new_attribute = json_decode($attribute['new_target_language'], true) ?? [];
            foreach ($new_attribute as $val) {
                $target_new[] = [
                    'target_language' => $val['label'],
                    'part' => $val['part_id'],
                    'explain' => Arr::get($val,'explain'),
                ];
            }
            try {
                DB::begintransaction();
                foreach ($target_new as $value) {
                    $ids[] = TargetLanguage::insertGetId($value);
                }
                DB::commit();
            } catch (Exception $exception) {
                DB::rollBack();
                throw $exception;
            }
        }

        if (!empty($attribute['target_language_ids'])) {
            foreach ($attribute['target_language_ids'] as $key => $val) {
                // chỗ này hơi ảo chút  có gì thì từ từ nghe e giải thích đã :))
                // mọi chuyện không như anh nghĩ

                if ($val == null || $val == 'null') {
                    unset($attribute['target_language_ids'][$key]);
                }
            }
        }
        $ids && $attribute['target_language_ids'] = array_merge($attribute['target_language_ids'], $ids);
    }

    public function syncAttribute(&$attribute, $question_id, $exampleResponse = false)
    {
        if (empty($attribute['data'])) {
            return;
        }
        !$exampleResponse && QuestionAttributes::query()->where('question_id', $question_id)->delete();

        $attr = $this->detachAttr($attribute, $question_id);
        !$exampleResponse && $attr && QuestionAttributes::insert($attr);
        return $attr;
    }

    public function detachAttr($attribute, $question_id)
    {

        $result = Helper::flattenKeysRecursively($attribute['data']);

        $flattenBracket = Helper::flattenKeysBracketRecursively($attribute['data'], 'data');
        $flattenBracket = array_keys($flattenBracket);
        $attributeTypes = $questionAttrs = [];
        !empty($attribute['attribute_types']) && $attributeTypes = !is_array($attribute['attribute_types']) ? json_decode($attribute['attribute_types'], true) : $attribute['attribute_types'];

        $index = 0;
        foreach ($result as $key => $value) {
            $elementName = $flattenBracket[$index];
            $parent = explode('.', $key)[0];
            $key = str_replace($parent . '.', '', $key);

            $questionAttr = [
                'question_id' => $question_id,
                'attribute' => $key,
                'group_parent' => $parent,
                'value' => $value,
                'type' => null,
                'type_option' => null
            ];

            if ($attributeTypes && !empty($attributeTypes[$elementName])) {
                $questionAttr['type'] = $attributeTypes[$elementName]['type'];
                $questionAttr['type_option'] = $attributeTypes[$elementName]['type_option'];
            }

            $questionAttrs[] = $questionAttr;
            $index++;
        }

        return $questionAttrs;
    }


    public function getResponseExampleDataAttr($data)
    {
        $question_id = $data['question_id'] ?? null;
        $platform_id = $data['platform_id'] ?? null;
        if (!$question_id && !$platform_id) return false;
        $data = json_decode($data['data'], true);
        $attribute = $this->syncAttribute($data, $question_id, true);
        if ($platform_id) {
            $platform = QuestionPlatform::find($platform_id);
            if (!$platform) return false;
            return self::groupDataExample($attribute, $platform);
        }
        return false;
    }

    public function groupDataExample($dataAttrs, $platform = null)
    {
        $question = new Question();
        $dataFill = [];
        $attr = $platform->detachAttrOptions();

        $data_apiName = [];
        foreach ($attr as &$val) {
            if (!empty($val['api_name'])) {
                $data_apiName[$val['key']] = $val['api_name'];
            }

            if (!empty($val['components'])) {
                self::mapApiName($val['components'], $data_apiName);
            }
        }


        if (!empty($dataAttrs)) {
            $attrWithParent = collect($dataAttrs)->groupBy('group_parent')->toArray();

            $dataFill = $question->detachDataAttribute($attrWithParent, true, $data_apiName);
        }
        return $dataFill;
    }

    public function mapApiName($data, &$data_apiName)
    {
        foreach ($data as $vl) {
            if (!empty($vl['api_name'])) {
                $data_apiName[$vl['key']] = $vl['api_name'];
            }

            if (!empty($vl['components'])) {
                self::mapApiName($vl['components'], $data_apiName);
            }
        }
    }
}
