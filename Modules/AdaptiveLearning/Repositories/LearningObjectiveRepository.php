<?php

namespace Modules\AdaptiveLearning\Repositories;

use App\Repositories\BaseRepository;
use Modules\AdaptiveLearning\Entities\Conditional;
use Modules\AdaptiveLearning\Entities\Goal;
use Modules\AdaptiveLearning\Entities\LearningObjective;
use Modules\AdaptiveLearning\Entities\SkillVerb;


/**
 * Class LearningObjectiveRepository
 * @package App\Repositories
 * @version May 16, 2022, 9:06 am +07
*/

class LearningObjectiveRepository extends BaseRepository
{
    /**
     * @var array
     */
    protected $fieldSearchable = [
        'id',
        'description',
        'code',
        'skill_id',
        'goal',
        'conditional'
    ];

    /**
     * Return searchable fields
     *
     * @return array
     */
    public function getFieldsSearchable()
    {
        return $this->fieldSearchable;
    }

    /**
     * Configure the Model
     **/
    public function model()
    {
        return LearningObjective::class;
    }

    public function update(array $attributes, $id)
    {

        $this->createAttribute($attributes);
        $learningObj =  parent::update($attributes, $id); // TODO: Change the autogenerated stub
        $learningObj->load(['skillVerb','learningGoal','learningConditional']);

        return $learningObj;
    }

    public function create(array $attributes)
    {
        $this->createAttribute($attributes);
        $learningObj =  parent::create($attributes); // TODO: Change the autogenerated stub
        $learningObj->load(['skillVerb','learningGoal','learningConditional']);

        return $learningObj;
    }

    public function find($id, $columns = ['*'])
    {
        $learningObj = parent::find($id, $columns); // TODO: Change the autogenerated stub
        if ($learningObj) {
            $learningObj->load(['skillVerb','learningGoal','learningConditional']);
            return $learningObj;
        }
        return  false;
    }


    public function createAttribute (array &$attributes) {

        if (!empty($attributes['parent_id'])) {
           $parent =  SkillVerb::find($attributes['parent_id']);
        }
        if($attributes['skill_id'] && !is_numeric($attributes['skill_id'])) {
            $skillVerb = SkillVerb::firstOrCreate(['name' => $attributes['skill_id']]);
            if (!empty($parent) && $skillVerb) {
                $skillVerb->parent_id = $parent->id;
                $skillVerb->save();
            }
            $attributes['skill_id'] = $skillVerb->id;
        }

        if($attributes['goal_id'] && !is_numeric($attributes['goal_id'])) {
            $goal = Goal::firstOrCreate(['name' => $attributes['goal_id']]);
            $attributes['goal_id'] = $goal->id;
        }

        if($attributes['conditional_id'] && !is_numeric($attributes['conditional_id'])) {
            $conditional = Conditional::firstOrCreate(['name' => $attributes['conditional_id']]);
            $attributes['conditional_id'] = $conditional->id;
        }
    }

}
